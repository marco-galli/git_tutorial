GIT & GITHUB tutorial 07/07/2023
w3schools.com/git/default.asp
__________________________________________________

Install GIT from git-scm.com -> download and install windows installer:
Open CMD from Start Menu -> GIT -> GIT Bash
$ git --version
	git version 2.41.0.windows.1

Let Git know who you are, each Git commit uses this information.
You will probably also want to use this when registering to GitHub later.
$ git config --global user.name "mgalli"
$ git config --global user.email "marcopuntogalli@gmail.com"

Create Git folder:
In CMD navigate to C:\Dati\git\w3s_proj
$ mkdir git
$ cd git
$ mkdir w3s_proj
$ cd w3s_proj
--------------------------------------------
git init
Initialize GIT on current folder:
$ git init
	Initialized empty Git repository in C:/Dati/git/w3s_proj/.git/
---------------------------------------------
git add
After creating files, Stage those files:
$ git add [FILENAME]	*add [FILENAME] file to Staging Environment
$ git add --all			*add all files to Staging Environment
Staged files are files that are ready to be committed to the repository you are working on.
--------------------------------------------
git status
Check the status of files:
$ git status
	On branch master

	No commits yet

	Changes to be committed:						*Staged files
	  (use "git rm --cached <file>..." to unstage)
			new file:   README.md
			new file:   bluestyle.css
			new file:   index.html

	Untracked files:								*unStaged files
	  (use "git add <file>..." to include in what will be committed)
			_appunti/

git status --short
	?? flag - Untracked files
	A flag - Files added to stage
	M flag - Modified files
	D flag - Deleted files
-------------------------------------------
git commit:
$ git commit -m "First release of Hello World!"
	[master (root-commit) c81f752] First release of Hello World!
	4 files changed, 38 insertions(+)
	create mode 100644 README.md
	create mode 100644 bluestyle.css
	create mode 100644 index.html
The Staging Environment has been committed to our repo, with the message: "First release of Hello World!"

Commit directly, skipping the staging environment:
$ git commit -a -m "Updated index.html with a new line"
	[master e4b81fb] Updated index.html with a new line
	2 files changed, 1 insertion(+)
-----------------------------------------------
git log
To view the history of commits for a repository.
$ git log
	commit e4b81fb05f1497c015510086db4eec12986cb732 (HEAD -> master)
	Author: mgalli <marcopuntogalli@gmail.com>
	Date:   Fri Jul 7 15:07:54 2023 +0200

		Updated index.html with a new line

	commit c81f752e0a9b2c4fa4af5ecf36af4b1e298c6cb4
	Author: mgalli <marcopuntogalli@gmail.com>
	Date:   Fri Jul 7 10:57:26 2023 +0200

		First release of Hello World!
------------------------------------------------
git help
To see all possible commands:
$ git help --all
To see available options for a specific command:
$ git [command name] -help
-----------------------------------------------
git branch
A branch is a new/separate version of the main repository.
Branches allow you to work on different parts of a project without impacting the main branch.
When the work is complete, a branch can be merged with the main project.
You can switch between branches and work on different projects without them interfering with each other.
To create a new branch:
$ git branch [new branch name]
To check all existing branches:
$ git branch
	  [new branch name]
	* master				<- *is the active branch
To switch branch:
$ git checkout [new branch name]
	Switched to branch '[new branch name]'
Edited files and new files have to be added to be tracked in the branch.
Changes have to be committed to become part of the branch.
Switching between branches by $ git checkout command will result in automatic modification of the files into the project folder.
---------------------------------------------------
Emergency branch:
If we are not yet done with a new branch, but we need to fix an error on master, I don't want to mess with master directly, and I do not want to mess with the new branch, since it is not done yet.
Let's create a new branch to deal with the emergency:
$ git checkout -b emergency-fix		*use -b to create the new branch with the checkout command
	Switched to a new branch 'emergency-fix'
After Adding and Commits, the fix is ready for being merged to the master branch.
